import json
from datetime import datetime
from currency_converter import convert_currency
import streamlit as st
import requests
from config import calculate_customs_clearance, get_car_age

st.set_page_config(page_title='–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', page_icon='üöó')
hide_menu_style = """
        <style>
        #MainMenu {visibility: hidden;}
        </style>
        <script>
        setInterval(function() {
            fetch(window.location.href);
        }, 5 * 60 * 1000);
        </script>
        """
st.markdown(hide_menu_style, unsafe_allow_html=True)

st.header('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –∞–≤—Ç–æ')

FUEL_TYPES = {
    '001': '–ë–µ–Ω–∑–∏–Ω',
    '002': '–î–∏–∑–µ–ª—å',
    '003': '–°–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    '005': '–ë–µ–Ω–∑–∏–Ω + —Å–∂–∏–∂–µ–Ω–Ω—ã–π –≥–∞–∑',
    '006': '–ë–µ–Ω–∑–∏–Ω + –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
    '007': '–î–∏–∑–µ–ª—å + –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
    '009': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
}
FUTURE_OWNER = [
    "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
    "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
]
CURRENCIES = {
    '–ï–≤—Ä–æ': 'EUR',
    '–î–æ–ª–ª–∞—Ä': 'USD',
    '–ö–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞': 'KRW',
    '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å': 'RUB'
}
MONTHS = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å",
          "–î–µ–∫–∞–±—Ä—å"]
main_url = 'http://45.90.216.240:3051/'
url2 = main_url + 'catalog.json'
icon_error = ':material/error_outline:'
is_calc_encar = False


def eur_to_rub():
    return convert_currency(1, 'EUR', 'RUB')


@st.cache_data(ttl=84600)
def load_json(url) -> json:
    dt = requests.get(url)
    return dt.json()


def get_car_id(url):
    if len(url) == 8 and url.isdigit():
        return {
            'code': 'ok',
            'car_id': url
        }
    if (8 < len(url) or len(url) < 8) and url.isdigit():
        return {
            'code': 'error',
            'message': f'CAR_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å –∏—Ö - {len(url)}'
        }
    k = url.split('detail/')
    if len(k) != 2:
        return {
            'code': 'error',
            'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç "detail/")'
        }
    j = k[1]
    j = j[0:8]
    if len(j) == 8:
        return {
            'code': 'ok',
            'car_id': j
        }
    return {
        'code': 'error',
        'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n'
                   f'{url}'
    }


def get_car_year(year: int):
    year_now = datetime.now().year
    return year_now - year


is_legal_entity, is_commercial = False, False

if st.checkbox('–•–æ—á—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –º–∞—à–∏–Ω—É —Å Encar'):
    is_calc_encar = True
    with st.container():
        input_link = st.text_input('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Encar –∏–ª–∏ id –∞–≤—Ç–æ')
        if st.button('–ù–∞–π—Ç–∏'):
            car_id = ''
            id_car_json = get_car_id(input_link)
            if id_car_json['code'] == 'error':
                st.error(id_car_json['message'], icon=icon_error)
                st.stop()
            else:
                car_id = id_car_json['car_id']
            if not car_id:
                st.error('CAR_ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', icon=icon_error)
                st.stop()
            data = load_json(f'http://45.90.216.240:3051/catalog?car={car_id}')
            if data.get('code') == 404:
                st.error('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!', icon=icon_error)
                st.stop()
            # ---------- print json -------------
            # st.write(data)
            # -------------------------------
            group_car_data = data['vehicle']['category']
            car_manufactory = group_car_data['manufacturerEnglishName']
            car_model = group_car_data['modelGroupEnglishName']
            car_name = group_car_data['gradeEnglishName']
            car_yearmonth = group_car_data['yearMonth']
            car_year = car_yearmonth[0:4]
            car_month = int(car_yearmonth[4:])
            car_month_word = MONTHS[car_month - 1]
            car_price = int(data['vehicle']['advertisement']['price']) * 10000
            car_displacement = data['vehicle']['spec']['displacement']
            car_type = data['vehicle']['spec']["fuelCd"]
            car_photos_path = data['vehicle']['photos'][0]['path']
            car_photo = 'https://ci.encar.com/carpicture' + car_photos_path[0:-7] + '001.jpg' + \
                        '?impolicy=heightRate&rh=696&cw=1160&ch=696&cg=Center '
            if car_type == '009':
                color = 'green'
            else:
                color = 'orange'
            fuel_type = FUEL_TYPES[car_type]
            st.markdown('#### –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å:')
            col1, col2, col3 = st.columns(3)
            car_price_in_rub = convert_currency(car_price, 'KRW', 'RUB')
            with col1:
                st.write(f"–ú–∞—Ä–∫–∞:&nbsp;&nbsp;&nbsp;:orange[{car_manufactory}]")
                st.write(f"–ú–æ–¥–µ–ª—å:&nbsp;&nbsp;&nbsp;:orange[{car_model} {car_name}]")
                st.write(f"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:&nbsp;&nbsp;&nbsp;:orange[{fuel_type}]")
            with col2:
                st.write(f"–û–±—ä–µ–º / –õ.–°.:&nbsp;&nbsp;&nbsp;:{color}[{car_displacement}]")
                st.write(f"–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞:&nbsp;&nbsp;&nbsp;:orange[{car_month_word} {car_year}]")
                formatted_number = f"‚Ç© {car_price:,}"
                formatted_car_in_rub = "{:,.0f}".format(car_price_in_rub).replace(",", " ")
                st.write(
                    f"–¶–µ–Ω–∞:&nbsp;&nbsp;&nbsp;:orange[{formatted_number}]&nbsp;|&nbsp;:gray[{formatted_car_in_rub} ‚ÇΩ]")
            with col3:
                st.image(car_photo, width=300)
            # st.write(car_photo)
            # --------------- –†–∞—Å—á–µ—Ç –∞–≤—Ç–æ ----------------------------
            st.markdown('#### –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:')
            engine_volume = car_displacement
            # ----- –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞ ---------
            if car_type == '009':
                is_electric = True
                engine_power = car_displacement
            else:
                is_electric = False
                engine_power = 170
                if car_type == '002':
                    fuel_type = 2
            data = get_car_age(car_yearmonth)
            car_age = data['year']
            is_eligible = data['is_eligible']
            txt = ':green[–ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ—Ö–æ–¥–Ω–æ–π]' if is_eligible else ':red[–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ–ø—Ä–æ—Ö–æ–¥–Ω–æ–π]'
            # st.write(car_age, type(car_age))
            st.write(txt)
            calc_is_legal = calculate_customs_clearance(car_price_in_rub, engine_volume, car_age, engine_power,
                                                        is_electric,
                                                        is_legal_entity, is_commercial, fuel_type, eur_to_rub())
            calc_not_legal = calculate_customs_clearance(car_price_in_rub, engine_volume, car_age, engine_power,
                                                         is_electric,
                                                         is_legal_entity, True, fuel_type, eur_to_rub())
            # formatted_value = "{:,.0f}".format(value).replace(",", " ")
            # st.write(f"{key}&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[ {formatted_value} —Ä—É–±.]")
            customs_clearance = calc_is_legal['–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ']
            custom_duty = calc_is_legal['–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞']
            util1 = calc_is_legal['–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä']
            util2 = calc_not_legal['–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä']
            tax = calc_is_legal['–ê–∫—Ü–∏–∑']
            vat = calc_is_legal['–ù–î–°']
            summary1 = calc_is_legal['–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏']
            summary2 = calc_not_legal['–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏']
            formatted_value = "{:,.0f}".format(customs_clearance).replace(",", " ")
            st.write(f'–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.]')
            formatted_value = "{:,.0f}".format(custom_duty).replace(",", " ")
            st.write(f'–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.]')
            formatted_value = "{:,.0f}".format(util1).replace(",", " ")
            formatted_value2 = "{:,.0f}".format(util2).replace(",", " ")
            st.write(
                f'–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.] / :red[{formatted_value2} —Ä—É–±.]')
            if tax != 0:
                formatted_value = "{:,.0f}".format(tax).replace(",", " ")
                st.write(f'–ê–∫—Ü–∏–∑&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.]')
            if vat != 0:
                formatted_value = "{:,.0f}".format(vat).replace(",", " ")
                st.write(f'–ù–î–°&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.]')
            formatted_itog1 = "{:,.0f}".format(summary1).replace(",", " ")
            formatted_itog2 = "{:,.0f}".format(summary2).replace(",", " ")
            st.write(f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green['
                     f'{formatted_itog1} —Ä—É–±.] / :red[{formatted_itog2} —Ä—É–±.]')
            frm_it1 = "{:,.0f}".format(summary1 + car_price_in_rub).replace(",", " ")
            frm_it2 = "{:,.0f}".format(summary2 + car_price_in_rub).replace(",", " ")
            st.write(f'–ò—Ç–æ–≥–æ (–¥–ª—è —Å–µ–±—è):&nbsp;&nbsp;&nbsp;:orange[{frm_it1}] :gray[‚ÇΩ &nbsp;&nbsp;&nbsp;&nbsp;'
                     f'{formatted_car_in_rub}‚ÇΩ + {formatted_itog1}‚ÇΩ]')
            st.write(f'–ò—Ç–æ–≥–æ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞):&nbsp;&nbsp;&nbsp;:orange[{frm_it2}] :gray[‚ÇΩ &nbsp;&nbsp;&nbsp;&nbsp;'
                     f'{formatted_car_in_rub}‚ÇΩ + {formatted_itog2}‚ÇΩ]')

            st.divider()
else:
    is_calc_encar = False

if not is_calc_encar:
    with st.container():
        owner = st.selectbox(label='–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤–≤–æ–∑–∏—Ç',
                             options=FUTURE_OWNER, index=0,
                             help='–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n- –º–∞—à–∏–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ '
                                  '—Ñ–∏–∑–ª–∏—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –µ—ë –ø—Ä–∏–≤—ë–∑ –Ω–µ –º–µ–Ω–µ–µ –≥–æ–¥–∞;\n- —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –≤–≤–æ–∑–∏—Ç '
                                  '–Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã –≤ –≥–æ–¥;\n- –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –±–æ–ª–µ–µ '
                                  '3 –ª.\n\n–ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, '
                                  '—Ç–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞')
        # if owner == FUTURE_OWNER[1]:
        #     is_commercial = True
        if owner == FUTURE_OWNER[1]:
            is_legal_entity = True
        # st.write(owner)
        car_year = st.selectbox('–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ', [2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025], 5)
        car_age = get_car_year(car_year)
        # ['–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π', '–î–∏–∑–µ–ª—å–Ω—ã–π', '–ì–∏–±—Ä–∏–¥–Ω—ã–π', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π']
        engine_type = st.selectbox('–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è', ['–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π', '–î–∏–∑–µ–ª—å–Ω—ã–π', '–ì–∏–±—Ä–∏–¥–Ω—ã–π', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π'], 1)
        # st.write(engine_type)
        if engine_type in ['–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π', '–ì–∏–±—Ä–∏–¥–Ω—ã–π']:
            fuel_type = 1
        else:
            fuel_type = 2
        is_electric = True if engine_type == '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π' else False
        # st.write('mortgage')
        engine_power = st.number_input('–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–õ–°)', 50, 1000, 170, disabled=not is_electric)
        engine_volume = st.number_input('–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥)', 500, 6000, 2199, disabled=is_electric)
        col1, col2, col3 = st.columns([2, 1, 1], vertical_alignment='bottom')
        with col1:
            car_price = st.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è', 100, 100_000_000, 20_000)
        with col2:
            price_curr = st.selectbox('–í–∞–ª—é—Ç–∞', CURRENCIES.keys(), 0)
        with col3:
            curr_to = 'RUB'
            curr_from = CURRENCIES[price_curr]
            # car_price_in_rub = converter.convert(car_price, curr_from, curr_to, 'CBR')
            car_price_in_rub = convert_currency(car_price, curr_from, curr_to)
            formatted_car_price_in_rub = "{:,.0f}".format(car_price_in_rub).replace(",", ".")
            st.write(f"&nbsp;&nbsp;:gray[= {formatted_car_price_in_rub} ‚ÇΩ]")

        if st.button('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'):
            st.write(f':gray[1 EUR - {eur_to_rub()} ‚ÇΩ]')
            if owner == FUTURE_OWNER[1]:
                data = calculate_customs_clearance(car_price_in_rub, engine_volume, car_age, engine_power, is_electric,
                                                   is_legal_entity, is_commercial, fuel_type, eur_to_rub())
                for key, value in data.items():
                    if value == 0:
                        continue
                    formatted_value = "{:,.0f}".format(value).replace(",", " ")
                    st.write(f"{key}&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[ {formatted_value} —Ä—É–±.]")
            else:
                data1 = calculate_customs_clearance(car_price_in_rub, engine_volume, car_age, engine_power, is_electric,
                                                    False, False, fuel_type, eur_to_rub())
                data2 = calculate_customs_clearance(car_price_in_rub, engine_volume, car_age, engine_power, is_electric,
                                                    False, True, fuel_type, eur_to_rub())
                s = data1["–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]
                formatted_value = "{:,.0f}".format(s).replace(",", " ")
                st.write(f"–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[ {formatted_value} —Ä—É–±.]")
                s = data1["–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞"]
                formatted_value = "{:,.0f}".format(s).replace(",", " ")
                st.write(f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[ {formatted_value} —Ä—É–±.]")
                s1 = data1["–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä"]
                s2 = data2["–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä"]
                formatted_value1 = "{:,.0f}".format(s1).replace(",", " ")
                formatted_value2 = "{:,.0f}".format(s2).replace(",", " ")
                st.write(f'–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value1} —Ä—É–±.] / '
                         f':red[{formatted_value2} —Ä—É–±.]')
                tax = data1["–ê–∫—Ü–∏–∑"]
                if tax != 0:
                    formatted_value = "{:,.0f}".format(tax).replace(",", " ")
                    st.write(f'–ê–∫—Ü–∏–∑&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.]')
                vat = data1["–ù–î–°"]
                if vat != 0:
                    formatted_value = "{:,.0f}".format(vat).replace(",", " ")
                    st.write(f'–ù–î–°&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green[{formatted_value} —Ä—É–±.]')
                s1 = data1["–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"]
                s2 = data2["–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏"]
                formatted_value1 = "{:,.0f}".format(s1).replace(",", " ")
                formatted_value2 = "{:,.0f}".format(s2).replace(",", " ")
                st.write(f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:green['
                         f'{formatted_value1} —Ä—É–±.]  / :red[{formatted_value2} —Ä—É–±.]')
